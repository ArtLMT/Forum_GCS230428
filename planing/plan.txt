# Introduction
I have implemented 2 design pattens into this project:
- MVC for visualbility
- DAO for better CRUD control structure

# structure
Perhaps this's project structure should look like this 

    /forum-website 
    ├── /public
    │   ├── /assets
    │   │   ├── /css
    │   │   │   ├── style.css
    │   │   ├── /js
    │   │       ├── script.js
    │   │       ├── validation.js
    │   ├── index.php
    ├── /src
    │   ├── /controllers
    │   │   ├── PostController
    │   │   ├── CommentController
    │   │   ├── ModuleController
    │   │   ├── AuthController
    │   ├── /models
    │   │   ├── User.php        # User model
    │   │   ├── Post.php        # Post model
    │   │   ├── Comment.php     # Comment model
    │   │   ├── Vote.php        # Vote model
    │   ├── /dao
    │   │   ├── /interfaces
    │   │   │   ├── UserDAO.php       # Interface for User DAO
    │   │   │   ├── PostDAO.php       # Interface for Post DAO
    │   │   │   ├── CommentDAO.php    # Interface for Comment DAO
    │   │   │   ├── VoteDAO.php       # Interface for Vote DAO
    │   │   ├── /implementations
    │   │   │   ├── UserDAOImpl.php   # Implementation of UserDAO
    │   │   │   ├── PostDAOImpl.php   # Implementation of PostDAO
    │   │   │   ├── CommentDAOImpl.php # Implementation of CommentDAO
    │   │   │   ├── VoteDAOImpl.php   # Implementation of VoteDAO
    │   ├── /views
    │       ├── homepage.html.php
    ├── /config
    │   ├── Database.php    # Handles PDO connection
    │   ├── queries.sql     # Store SQL queries


There's some changes needed in the DB, such as module's description

This project will use DAO design pattens to help in CRUD
The work flow shall be like this

Router -> receive request and locate it to the method in controllers
Controllers -> Act like the middleman between the Views and DAO (db logic)
DAOImpl -> Interact with the database  to fetch and modify database
Model -> represent a object, holding the data retrieved from the database


fetch(PDO::FETCH_ASSOC); // Returns associative array (column names as keys)
fetch(PDO::FETCH_OBJ);   // Returns an object (column names as properties)
fetch(PDO::FETCH_NUM);   // Returns a numeric array (column indexes as keys)