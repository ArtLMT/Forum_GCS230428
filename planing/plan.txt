# Introduction
I have implemented 2 design pattens into this project:
- MVC for visualbility
- DAO for better CRUD control structure

# structure
Perhaps this's project structure should look like this 

    /forum-website 
    ├── /public
    │   ├── /css
    │   │   ├── input.css
    │   ├── /assets
    │   │   ├── /css
    │   │   │   ├── style.css
    │   │   ├── /js
    │   │       ├── script.js
    │   │       ├── validation.js
    │   ├── /uploads
    │   │       ├──/postAsset # store post's images
    │   │       ├──/userAsset # store user's images
    │   ├── .htaccess
    │   ├── index.php # everything start here
    ├── /src
    │   ├── Router.php
    │   ├──/style
    │   │   ├── tailwind.css
    │   ├── /controllers
    │   │   ├── AuthController.php
    │   │   ├── AuthController.php
    │   │   ├── CommentController.php
    │   │   ├── EmailMessageController.php
    │   │   ├── ModuleController.php
    │   │   ├── PostController.php
    │   │   ├── UserController.php
    │   ├── /dal
    │   │   ├── /interfaces
    │   │   │   ├── CommentDAO.php    # Interface for Comment DAO
    │   │   │   ├── EmailMessageDAO.php # Interface for EmailMessage DAO
    │   │   │   ├── ModuleDAO.php     # Interface for Module DAO
    │   │   │   ├── PostDAO.php       # Interface for Post DAO
    │   │   │   ├── UserDAO.php       # Interface for User DAO
    │   │   │   ├── VoteDAO.php       # Interface for Vote DAO
    │   │   ├── /implementations
    │   │   │   ├── CommentDAOImpl.php # Implementation of CommentDAO
    │   │   │   ├── EmailMessageDAOImpl.php # Implementation of EmailMessageDAO
    │   │   │   ├── ModuleDAOImpl.php # Implementation of ModuleDAO
    │   │   │   ├── PostDAOImpl.php   # Implementation of PostDAO
    │   │   │   ├── UserDAOImpl.php   # Implementation of UserDAO
    │   │   │   ├── VoteDAOImpl.php   # Implementation of VoteDAO
    │   │   ├── BaseDAO.php # Store function to execute sql
    │   ├── /models # only contain getter and setter
    │   │   ├── Comment.php     # Comment model
    │   │   ├── EmailMessage.php     # EmailMessage model
    │   │   ├── User.php        # User model
    │   │   ├── Post.php        # Post model
    │   │   ├── Vote.php        # Vote model
    │   ├── / utils
    │   │   ├── Utils.php
    │   │   ├── Validation.php # Store validate method, currently only have validate if exits
    │   │   ├── Auth.php
    │   ├── /views
    │       ├── /layout
    │       │   ├── layout.html.php # Layout of the website, have a container for other view file
    │       ├── /auth
    │       │   ├── loginFrom.html.php 
    │       │   ├── signInForm.html.php
    │       ├── /messages
    │       │   ├── editMessages.html.php
    │       │   ├── messagesList.html.php
    │       │   ├── sendMessage.html.php
    │       ├── /module
    │       │   ├── createModule.html.php
    │       │   ├── moduleLists.html.php
    │       │   ├── updateModule.html.php
    │       ├── /post
    │       │   ├── createPost.html.php
    │       │   ├── postList.html.php # Part of they layout, display all post as default
    │       │   ├── updatePost.html.php # UI to edit a post
    │       ├── /users
    │       │   ├── editUser.html.php
    │       │   ├── profile.html.php
    │       │   ├── userList.html.php
    ├── /config
    │   ├── Database.php    # Handles PDO connection
    │   ├── queries.sql     # Store SQL queries
    ├── autoload.php


There's some changes needed in the DB, such as module's description

This project will use DAO design pattens to help in CRUD
The work flow shall be like this

Router -> receive request and locate it to the method in controllers
Controllers -> Act like the middleman between the Views and DAO (db logic)
DAOImpl -> Interact with the database  to fetch and modify database
Model -> represent a object, holding the data retrieved from the database


fetch(PDO::FETCH_ASSOC); // Returns associative array (column names as keys)
fetch(PDO::FETCH_OBJ);   // Returns an object (column names as properties)
fetch(PDO::FETCH_NUM);   // Returns a numeric array (column indexes as keys)


# Explain changes
1. Refactor the logic of how backend and front end work:
The controllers from now on will only return datas as an object
The views decide how to fetch and display the database
This is to follow the MVC principles

Separation of Concerns (SoC) – The controller shouldn’t handle data formatting or presentation. That’s the job of the view.
Security & Flexibility – If you handle data selection (like adding username) inside the controller, you limit flexibility. The view should decide how to present the data.
Easier Testing & Debugging – When your controller only returns objects, it's easier to write unit tests and debug without worrying about HTML or templates.
Better Maintainability – If you later change how data is displayed, you only update the view instead of modifying the controller.

htmlspecialchars: use to prevent hmlt and js code to be executed
-> use when:
    display
    user input data
    display in tags: <p></p> <h1></h1> etc
However, its not needed when there's a strictly rules, such as numberic field, or file

Login system:
Email and password will be used to verify user
Not username -> had error since it's not unique

DAO and Controller:
-> call Controller when: 
    -> handling requests from users (e.g., processing form submissions)
    -> performing business logic before saving or retrieving data.
-> call DAO when:
    ->  directly interacting with the database (CRUD operations)
    ->  inside a controller and need to get/save users
    -> If another class needs raw database data without extra processing

Added isAdmin into users table
store 0 and 1 value for easy use (bool)
use Tiny INT to cost less memory

Pagination:
Using getUsersPaginated to get user's Pagination for example
Including 2 params: Limit and Offset.
Limit is the numbers of object that will be set at 1 time
Offset is the order of the first object will be set, exp: offset = 0 -> get from 0 to limit ; offset = 8 -> get from 8 to limit
